package IBW_SBOL_update.make_doc;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import org.sbolstandard.core2.AccessType;
import org.sbolstandard.core2.ComponentDefinition;
import org.sbolstandard.core2.OrientationType;
import org.sbolstandard.core2.SBOLConversionException;
import org.sbolstandard.core2.SBOLDocument;
import org.sbolstandard.core2.SBOLValidationException;
import org.sbolstandard.core2.Sequence;
import org.sbolstandard.core2.SequenceAnnotation;
import org.sbolstandard.core2.SequenceOntology;


public class App 
{
	
	static BiocompilerModel biocompilerModel = new BiocompilerModel();
	
    public static void main( String[] args ) {

        ArrayList<Biopart> parts1 = new ArrayList<Biopart>();
        Biopart cell1part1 = new Biopart(2, "FirstCellFirstPart", "PROMOTER", "", 1, 1, "aa");
        Biopart cell1part2 = new Biopart(4, "FirstCellSecondPart", "GENE", "", 1, 2, "cccc");
        Biopart cell1part3 = new Biopart(6, "FirstCellFinalPart", "", "Random_url", 0, 3, "tttccc");
        parts1.add(cell1part1);
        parts1.add(cell1part2);
        parts1.add(cell1part3);
        Device d1 = new Device(parts1);
        ArrayList<Device> devices1 = new ArrayList<Device>();
        devices1.add(d1);
        biocompilerModel.addCell("FirstCell", devices1);
        
        ArrayList<Biopart> parts2 = new ArrayList<Biopart>();
        Biopart cell2part1 = new Biopart(2, "SecondCellFirstPart", "TERMINATOR", "", 0, 1, "at");
        Biopart cell2part2 = new Biopart(2, "SecondCellSecondPart", "random", "", 0, 2, "gc");
        parts2.add(cell2part1);
        parts2.add(cell2part2);
        Device d2 = new Device(parts2);
        ArrayList<Device> devices2 = new ArrayList<Device>();
        devices2.add(d2);
        biocompilerModel.addCell("SecondCell", devices2);
        
        try {
			SBOLDocument doc = makeSBOLDocument();
			doc.write("Test SBOL Document");
		} catch (SBOLValidationException e) {
			System.out.println("SBOLValidationException Thrown");
			e.printStackTrace();
		} catch (SBOLConversionException e) {
			System.out.println("SBOLConversionException Thrown");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("IOException Thrown");
			e.printStackTrace();
		}
    }

//    TO UPDATE
//    def private static getSequenceFromNCL(String partName) {
//
//    	var String sequence
//    	try {
//    		var url = new URL("http://sbol.ncl.ac.uk:8081/part/" + partName + "/sbol").openStream
//    		//Is this URL readable
//    		var sbol = SBOLReader.read(url)
//    		//WHAT IS THIS DOING
//    		sequence = ((sbol?.contents?.get(0) as Collection)?.components?.get(0) as DnaComponent)?.dnaSequence?.
//    			nucleotides
//    	} catch (Exception e) {
//    		throw new UnknownPartInVirtualPartRepository(partName)
//    	}
//
//    	return sequence
//    }
    
}
